basePath: /
consumes:
    - application/json
definitions:
    Authentication:
        properties:
            email:
                description: |-
                    Email of user df
                    in: string
                type: string
                x-go-name: Email
            password:
                description: |-
                    Password
                    in: string
                type: string
                x-go-name: Password
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/repository/models
    BalanceRequest:
        description: |-
            ChainId and address are neccessary to get balance. Currency is optional.
            Only currencies return in the system defined.
        properties:
            address:
                description: Taken address from create wallet api
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
                x-go-name: Address
            chainId:
                description: sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: |-
                    Currency code is the token short name like GOLD, USD, USDT
                    It gives as a parameter of TokenName when deploying contract
                example: USD
                type: string
                x-go-name: Currency
        required:
            - chainId
            - address
            - currency
        title: Balance request for the address and chain id.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    BlockDetail:
        description: Block detail
        properties:
            lastest:
                description: Latest block of given chain
                format: int64
                type: integer
                x-go-name: LastestBlock
            trans:
                description: Transaction in the block.
                items:
                    $ref: '#/definitions/BlockTran'
                type: array
                x-go-name: BlockTran
        required:
            - lastest
            - trans
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    BlockTran:
        properties:
            receiver:
                description: Reciever of the coin or token.
                type: string
                x-go-name: Receiver
            sender:
                description: Sender of the coin or token
                type: string
                x-go-name: Sender
            tran:
                $ref: '#/definitions/UpdateChainSettle'
        title: transaction detail in the block.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    BurnRequest:
        properties:
            address:
                description: Taken address from create wallet api
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
                x-go-name: Address
            amount:
                description: |-
                    Amount of coin. It is integer and no decimal. It should be powered by precision.
                    For cosmos generally 6. 1 ATOM=1000000
                    For nft, precision is zero. then amount should be 1 to burn it.
                    Amount is the nft number.
                example: "1000000"
                type: string
                x-go-name: Amount
            chainId:
                description: sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: |-
                    Currency code is the token short name like GOLD, USD, USDT
                    It gives as a parameter of TokenName when deploying contract
                example: USD
                type: string
                x-go-name: Currency
            memo:
                description: Some chain support memo log. It may be shown in the blockexplorer.
                type: string
                x-go-name: Memo
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - address
            - amount
            - currency
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    ChainsResponse:
        description: Chain definition response
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            networkCoin:
                description: Network Coin
                example: ETH
                type: string
                x-go-name: NetworkCoin
        required:
            - chainId
            - networkCoin
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    CoinsResponse:
        description: Coin definition response
        properties:
            chainId:
                description: CoinId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            contractAddress:
                description: Contract Address
                type: string
                x-go-name: ContractAddress
            currency:
                description: The currency defined in the system.
                example: GOLD
                type: string
                x-go-name: Currency
            denom:
                description: The currency defined in the chain.
                example: GOLD
                type: string
                x-go-name: Denom
            gasCoin:
                description: The gas currency defined in the chain. To transfer token or nft, needs to have gas coin.
                example: TFAB
                type: string
                x-go-name: GasCoin
            manageType:
                description: 'Manage Type is values 1: Coin 2: Token, 3: Nft'
                example: "2"
                type: string
                x-go-name: ManageType
            precision:
                description: Token precision
                example: 6
                format: int16
                type: integer
                x-go-name: Precision
        required:
            - chainId
            - currency
            - manageType
            - precision
            - denom
            - gasCoin
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    DeployContractParameter:
        properties:
            name:
                description: |-
                    #MAXSUPPLY
                    #NAME
                    #URI
                example: '#NAME'
                type: string
                x-go-name: Name
            value:
                description: |-
                    10000
                    Tokenfab Wind Turbine NFT
                    https://nft.tokenfab.io/api/v1/wildturbine/tokens/
                example: Tokenfab Wind Turbine NFT
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    DeployRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            contractName:
                description: For solidity, it sould be like a class name, for cosmos based chain is the free format.
                example: Tokenfab USD
                type: string
                x-go-name: ContractName
            contractOwner:
                description: Contract creator address. It should have gas coin related chain and it should be imported or created on the system.
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
                x-go-name: ContractOwner
            contractPatameters:
                description: 'Parameter on the github repo template. There is # parameter in the template.'
                items:
                    $ref: '#/definitions/DeployContractParameter'
                type: array
                x-go-name: ContractPatameters
            contractTemplate:
                description: 'Template name at github repo. For solidity: https://github.com/tokenfab/testnet-contracts/tree/main/templates For Cosmos: https://github.com/tokenfab/testnet-contracts/tree/main/templates/wasm'
                example: cw20_base.wasm
                type: string
                x-go-name: ContractTemplate
            manageType:
                description: 'Manage Type is values 1: Coin 2: Token, 3: Nft'
                example: "2"
                type: string
                x-go-name: ManageType
            precision:
                description: Token precision
                example: 6
                format: int16
                type: integer
                x-go-name: Precision
            tokenName:
                description: TokenName is the token short name like GOLD, USD, USDT
                example: USD
                type: string
                x-go-name: TokenName
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - tokenName
            - contractOwner
            - manageType
            - contractTemplate
            - contractName
            - precision
            - contractPatameters
        title: Defining smart contract in the system and deploy it to the chain.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    DeployResponse:
        properties:
            contractAddress:
                description: Contract Address
                type: string
                x-go-name: ContractAddress
            txHash:
                description: Tx hash
                type: string
                x-go-name: TxHash
            txKey:
                description: Tx Key
                type: string
                x-go-name: TxKey
        title: Smart contract creating result.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    MintRequest:
        properties:
            address:
                description: Taken address from create wallet api
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
                x-go-name: Address
            amount:
                description: Amount of coin. It is integer and no decimal. It should be powered by precision. For cosmos generally 6. 1 ATOM=1000000
                example: "1000000"
                type: string
                x-go-name: Amount
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The currency defined in the system.
                example: GOLD
                type: string
                x-go-name: Currency
            memo:
                description: Some chain support memo log. It may be shown in the blockexplorer.
                type: string
                x-go-name: Memo
            nftDetail:
                $ref: '#/definitions/NftDetail'
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - address
            - amount
            - currency
        title: mint request is used for deposit api. Contract owner account can make mint operation for any address.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftAccessRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The NFT short name of the asset.
                example: TOWER
                type: string
                x-go-name: Currency
            nftId:
                description: Nft Id given by randomly but it must be unique.
                example: NO1, 1, 2005
                type: string
                x-go-name: NftId
            renter:
                description: Renter address. Only nft owner can rent.
                example: trm1fq5xzwrduvzqeccgjraakk9sql87uttdyr78e7
                type: string
                x-go-name: Renter
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - currency
            - renter
            - nftId
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftClass:
        properties:
            description:
                description: description is a brief description of nft classification. Optional
                type: string
                x-go-name: Description
            id:
                description: |-
                    id defines the unique identifier of the NFT classification, similar to the
                    contract address of ERC721
                example: "1"
                type: string
                x-go-name: Id
            name:
                description: name defines the human-readable name of the NFT classification. Optional
                example: human-readable name
                type: string
                x-go-name: Name
            symbol:
                description: symbol is an abbreviated name for nft classification. Optional
                example: TOWER
                type: string
                x-go-name: Symbol
            uri:
                description: |-
                    uri for the class metadata stored off chain. It can define schema for Class
                    and NFT `Data` attributes. Optional
                type: string
                x-go-name: Uri
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftClassResponse:
        properties:
            nftClasses:
                description: nft classes defined for a contract address
                items:
                    $ref: '#/definitions/NftClass'
                type: array
                x-go-name: NftClasses
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftDetail:
        properties:
            avatarUri:
                description: small image url
                type: string
                x-go-name: AvatarUri
            bedding:
                description: how many bed include
                type: string
                x-go-name: Bedding
            chainId:
                description: class_id associated with the NFT, similar to the contract address of ERC721
                type: string
                x-go-name: ClassId
            id:
                description: id is a unique identifier of the NFT
                type: string
                x-go-name: Id
            size:
                description: room size. large midium or m2
                type: string
                x-go-name: Size
            type:
                description: all inclusive, room breakfast
                type: string
                x-go-name: Type
            uri:
                description: uri for the NFT metadata stored off chain
                type: string
                x-go-name: Uri
            wireless:
                description: having wireless or not
                type: boolean
                x-go-name: Wireless
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftDetailResponse:
        properties:
            nftDetails:
                description: nft classes defined for a contract address
                items:
                    $ref: '#/definitions/NftDetail'
                type: array
                x-go-name: NftDetail
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftGiveAccessRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The NFT short name of the asset.
                example: TOWER
                type: string
                x-go-name: Currency
            newRenter:
                description: Renter address. Only nft owner can rent.
                example: trm1fq5xzwrduvzqeccgjraakk9sql87uttdyr78e7
                type: string
                x-go-name: NewRenter
            nftId:
                description: Nft Id given by randomly but it must be unique.
                example: NO1, 1, 2005
                type: string
                x-go-name: NftId
            renter:
                description: Renter address. Only nft owner can rent.
                example: trm1fq5xzwrduvzqeccgjraakk9sql87uttdyr78e7
                type: string
                x-go-name: Renter
            sessionId:
                description: Session Id, most likely start date of the rent.
                example: "202305201400"
                type: string
                x-go-name: SessionId
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - currency
            - nftId
            - sessionId
            - renter
            - newRenter
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftRentBurnRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The NFT short name of the asset.
                example: TOWER
                type: string
                x-go-name: Currency
            nftId:
                description: Nft Id given by randomly but it must be unique.
                example: NO1, 1, 2005
                type: string
                x-go-name: NftId
            sessionId:
                description: Session Id, most likely start date of the rent.
                example: "202305201400"
                type: string
                x-go-name: SessionId
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - currency
            - nftId
            - sessionId
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftRentDate:
        properties:
            endDate:
                description: 'End date. UTC Format: YYYYMMDDHHMM'
                example: 202305201400
                format: int64
                type: integer
                x-go-name: EndDate
            sessionId:
                description: Session Id, most likely start date of the rent.
                example: "202305201400"
                type: string
                x-go-name: SessionId
            startDate:
                description: 'Start date. UTC Format: YYYYMMDDHHMM'
                example: 202305141400
                format: int64
                type: integer
                x-go-name: StartDate
        required:
            - sessionId
            - startDate
            - endDate
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftRentMintRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The NFT short name of the asset.
                example: TOWER
                type: string
                x-go-name: Currency
            endDate:
                description: 'End date. UTC Format: YYYYMMDDHHMM'
                example: 202305201400
                format: int64
                type: integer
                x-go-name: EndDate
            nftId:
                description: Nft Id given by randomly but it must be unique.
                example: NO1, 1, 2005
                type: string
                x-go-name: NftId
            renter:
                description: Renter address. Only nft owner can rent.
                example: trm1fq5xzwrduvzqeccgjraakk9sql87uttdyr78e7
                type: string
                x-go-name: Renter
            startDate:
                description: 'Start date. UTC Format: YYYYMMDDHHMM'
                example: 202305141400
                format: int64
                type: integer
                x-go-name: StartDate
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - currency
            - nftId
            - renter
            - startDate
            - endDate
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftRenterRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The NFT short name of the asset.
                example: TOWER
                type: string
                x-go-name: Currency
            nftId:
                description: Nft Id given by randomly but it must be unique.
                example: NO1, 1, 2005
                type: string
                x-go-name: NftId
            sessionId:
                description: Session Id, most likely start date of the rent.
                example: "202305201400"
                type: string
                x-go-name: SessionId
        required:
            - chainId
            - currency
            - nftId
            - sessionId
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftRenterResponse:
        properties:
            renter:
                description: Renter address. Only nft owner can rent.
                example: trm1fq5xzwrduvzqeccgjraakk9sql87uttdyr78e7
                items:
                    type: string
                type: array
                x-go-name: Renters
        required:
            - renter
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftSessionRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The NFT short name of the asset.
                example: TOWER
                type: string
                x-go-name: Currency
            nftId:
                description: Nft Id given by randomly but it must be unique.
                example: NO1, 1, 2005
                type: string
                x-go-name: NftId
            renter:
                description: Renter address. Only nft owner can rent.
                example: trm1fq5xzwrduvzqeccgjraakk9sql87uttdyr78e7
                type: string
                x-go-name: Renter
        required:
            - chainId
            - currency
            - nftId
            - renter
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    NftSessionResponse:
        properties:
            nftRentDates:
                items:
                    $ref: '#/definitions/NftRentDate'
                type: array
                x-go-name: NftRents
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    TransferRequest:
        properties:
            amount:
                description: Amount of coin. It is integer and no decimal. It should be powered by precision. For cosmos generally 6. 1 ATOM=1000000
                example: "1000000"
                type: string
                x-go-name: Amount
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: The currency defined in the system.
                example: TFAB
                type: string
                x-go-name: Currency
            fromAddress:
                description: Taken address from create wallet api
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
                x-go-name: FromAddress
            gasLimit:
                description: Amount of gas.
                example: 200000
                format: uint64
                type: integer
                x-go-name: GasLimit
            memo:
                description: Some chain support memo log. It may be shown in the blockexplorer.
                type: string
                x-go-name: Memo
            toAddress:
                description: To address shuould be taken from the same coin base.
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
                x-go-name: ToAddress
            txKey:
                description: the key given by client with any unique number to take response with that key. If not use you may set empty. Use it to take asynch response.
                example: "1"
                type: string
                x-go-name: TxKey
        required:
            - chainId
            - fromAddress
            - toAddress
            - amount
            - currency
        title: Transfer request to transfer coin, nft, token and make payment.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    TransferResponse:
        description: Txkey and Txhash is returned to the user
        properties:
            txKey:
                description: Tx key is the given in the request.
                type: string
                x-go-name: TxKey
            txnHash:
                description: Tx hash is the key for transaction.
                type: string
                x-go-name: TxHash
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    UpdateChainSettle:
        properties:
            amount:
                description: Amount
                format: double
                type: number
                x-go-name: Amount
            blockCount:
                description: which block transaction belongs.
                format: int64
                type: integer
                x-go-name: BlockCount
            currency:
                description: Currency
                type: string
                x-go-name: Currency
            error:
                description: transaction error when validator accept it.
                type: string
                x-go-name: Error
            fee:
                description: Taken fee from the transaction
                format: int64
                type: integer
                x-go-name: Fee
            gas:
                description: Taken gas from the transaction
                format: int64
                type: integer
                x-go-name: Gas
            isSuccessful:
                description: transaction in the chain or not.
                type: boolean
                x-go-name: IsSuccessful
            txHash:
                description: Transaction hash
                type: string
                x-go-name: TxHash
        title: transaction settlement information.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    VerifyContractRequest:
        properties:
            chainId:
                description: ChainId should be the same with the system. It could be taken from block explorer like sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                example: tokenfab-testnet
                type: string
                x-go-name: ChainId
            currency:
                description: |-
                    Currency code is the token short name like GOLD, USD, USDT
                    It gives as a parameter of TokenName when deploying contract
                example: USD
                type: string
                x-go-name: Currency
        required:
            - chainId
            - currency
        title: Contract verification request after deploying contract. For cosmos based chain, make it twice until taken contract address.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    VerifyContractResponse:
        description: |-
            Cosmos based chain returns after two times call. Becuase chain processes the transaction.
            For solidity, take the flatten file from github and use etherscan to verify your contract.
        properties:
            contractAddress:
                description: Contract address
                example: tfab16jzpxp0e8550c9aht6q9svcux30vtyyyyxv5w2l2djjra46580wsnnytlw
                type: string
                x-go-name: ContractAddress
        title: Contract verification response. It returns contract address.
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    WalletGetRequest:
        properties:
            accountId:
                description: |-
                    Account Id
                    in: int
                format: uint32
                type: integer
                x-go-name: AccountId
            chainId:
                description: |-
                    Chain Id
                    in: string
                type: string
                x-go-name: ChainId
            talentId:
                description: |-
                    Talent Id
                    in: int
                format: uint32
                type: integer
                x-go-name: TalentId
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
    WalletImportRequest:
        properties:
            accountId:
                format: uint32
                type: integer
                x-go-name: AccountId
            chainId:
                type: string
                x-go-name: ChainId
            mnemonic:
                type: string
                x-go-name: Mnemonic
            talentId:
                format: uint32
                type: integer
                x-go-name: TalentId
        type: object
        x-go-package: github.com/tokenfab/blockchain-client/typeschain
info:
    contact:
        email: e.mersinli@gmail.com
        name: Emrah Mersinli
        url: http://mustody.com
    description: |-
        the purpose of this application is to provide an application
        that makes all kind of blockchain operations more and more easier and chain agnostic.

        Is is a multi-tenant application that can be used by multi client or tenant.
        Each client can create user's wallet and public address by given key like tenant id and user id.
        System store users private key securely under hsm key or mpc wallet.

        Tanent can perform various blockchain operation such as contract create, contract verify, burn, mint, transfer and so on.
        In summary, this multi-tenant application provides a secure environment for tenants to manage their digital assets on specific blockchains,
        with the added security of a custody wallet system that stores private keys under HSM key and MPC wallet.

        This should demonstrate all the possible comment annotations
        that are available to turn go code into a fully compliant swagger 2.0 spec
    license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    termsOfService: |-
        there are no TOS at this moment, use at your own risk we take no responsibility
        You may only use our apis for lawful purposes.
        You must comply with the acceptable use terms set out in this section.
    title: Blockchain wrapper APIs.
    version: 0.0.1
paths:
    /contract/deploy:
        post:
            description: Contract deploy or store
            operationId: contractstore
            parameters:
                - description: Deploy Contract
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/DeployRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/DeployResponse'
            tags:
                - contract
    /contract/verify:
        post:
            description: Contract deploy or store
            operationId: contractverify
            parameters:
                - description: Verify Contract
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/VerifyContractRequest'
                  x-go-name: Body
            responses:
                "200":
                    description: VerifyContractResponse
                    schema:
                        $ref: '#/definitions/VerifyContractResponse'
            tags:
                - contract
    /param/chains:
        get:
            operationId: paramchain
            responses:
                "200":
                    description: ChainsResponse
                    schema:
                        $ref: '#/definitions/ChainsResponse'
            summary: Existing chains in the system.
    /param/coins:
        get:
            operationId: paramcoin
            parameters:
                - description: Chain Id
                  in: query
                  name: chainid
                  required: true
                  type: string
            responses:
                "200":
                    description: CoinsResponse
                    schema:
                        $ref: '#/definitions/CoinsResponse'
            summary: Existing chains in the system.
    /ping:
        get:
            description: Ping
            operationId: ping
            responses:
                "200":
                    description: ""
    /rental/classes:
        get:
            description: Getting class of the contract owner
            operationId: rentalclasses
            parameters:
                - description: Chain id
                  in: query
                  name: chainid
                  required: true
                  type: string
                - description: contract owner
                  in: query
                  name: contractowner
                  required: true
                  type: string
            responses:
                "200":
                    description: NftClassResponse
                    schema:
                        $ref: '#/definitions/NftClassResponse'
    /rental/nftaccess:
        post:
            description: Transfer Token
            operationId: NftAccessRequest
            parameters:
                - description: Using rented nft.
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/NftAccessRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/TransferResponse'
            tags:
                - rent
    /rental/nftgiveaccess:
        post:
            description: Transfer Token
            operationId: NftGiveAccessRequest
            parameters:
                - description: Renter give access to another friend
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/NftGiveAccessRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/TransferResponse'
            tags:
                - rent
    /rental/nfts:
        get:
            description: Getting nfts of the class
            operationId: rentalnfts
            parameters:
                - description: Chain id
                  in: query
                  name: chainid
                  required: true
                  type: string
                - description: Class id
                  in: query
                  name: classid
                  required: true
                  type: string
            responses:
                "200":
                    description: NftDetailResponse
                    schema:
                        $ref: '#/definitions/NftDetailResponse'
    /rental/renters:
        get:
            description: Getting renters
            operationId: rentalrenters
            parameters:
                - description: Class id of the nft
                  in: query
                  name: classid
                  required: true
                  type: string
                - description: Currency of the class
                  in: query
                  name: currency
                  required: true
                  type: string
                - description: nft id
                  in: query
                  name: nftid
                  required: true
                  type: string
                - description: renter
                  in: query
                  name: sessionid
                  required: true
                  type: string
            responses:
                "200":
                    description: NftRenterResponse
                    schema:
                        $ref: '#/definitions/NftRenterResponse'
    /rental/rentnftmint:
        post:
            description: Contract owner can mint a date for a specific renter
            operationId: NftRentMintRequest
            parameters:
                - description: Rent Nft for a period of time.
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/NftRentMintRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/TransferResponse'
            tags:
                - rent
    /rental/sessions:
        get:
            description: Getting session
            operationId: rentalsessions
            parameters:
                - description: Class id of the nft
                  in: query
                  name: chainid
                  required: true
                  type: string
                - description: Currency of the class
                  in: query
                  name: currency
                  required: true
                  type: string
                - description: nft id
                  in: query
                  name: nftid
                  required: true
                  type: string
                - description: renter
                  in: query
                  name: renter
                  required: true
                  type: string
            responses:
                "200":
                    description: NftSessionResponse
                    schema:
                        $ref: '#/definitions/NftSessionResponse'
    /tx/block:
        get:
            operationId: transactionblock
            parameters:
                - description: Block number
                  in: query
                  name: current
                  required: true
                  type: string
                - description: chain id
                  in: query
                  name: chainid
                  required: true
                  type: string
            responses:
                "200":
                    description: BlockDetail
                    schema:
                        $ref: '#/definitions/BlockDetail'
            summary: Getting transaction by Tx Hash and Chain Id.
    /tx/detail:
        get:
            operationId: transactiondetail
            parameters:
                - description: Transaction Hash
                  in: query
                  name: txhash
                  required: true
                  type: string
                - description: Chain Id
                  in: query
                  name: chainid
                  required: true
                  type: string
            responses:
                "200":
                    description: UpdateChainSettle
                    schema:
                        $ref: '#/definitions/UpdateChainSettle'
            summary: Getting transaction by Tx Hash and Chain Id.
    /wallet/balance:
        post:
            description: Get balance of a wallet
            operationId: getBalance
            parameters:
                - description: Balance check struct
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/BalanceRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/getBalanceResponse'
            tags:
                - wallet
    /wallet/create:
        post:
            description: Create wallet
            operationId: createWallet
            parameters:
                - description: Create wallet struct
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/WalletGetRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/createWalletResponse'
            tags:
                - wallet
    /wallet/deposit:
        post:
            description: Mint Token
            operationId: mint
            parameters:
                - description: Mint token
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/MintRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/TransferResponse'
            tags:
                - wallet
    /wallet/import:
        post:
            description: Import wallet
            operationId: importWallet
            parameters:
                - description: Import wallet struct
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/WalletImportRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/createWalletResponse'
            tags:
                - wallet
    /wallet/transfer:
        post:
            description: Transfer Token
            operationId: transfer
            parameters:
                - description: Transfer request
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/TransferRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/TransferResponse'
            tags:
                - wallet
    /wallet/withdraw:
        post:
            description: Burn Token
            operationId: burn
            parameters:
                - description: Burn token
                  in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/BurnRequest'
                  x-go-name: Body
            responses:
                "200":
                    $ref: '#/responses/TransferResponse'
            tags:
                - wallet
produces:
    - application/json
responses:
    DeployResponse:
        description: ""
        schema:
            $ref: '#/definitions/DeployResponse'
    TransferResponse:
        description: ""
        schema:
            $ref: '#/definitions/TransferResponse'
    createWalletResponse:
        description: Created wallet is returned to the user
    getBalanceRequest:
        description: |-
            Balance request for the address and chain id.
            ChainId and address are neccessary to get balance. Currency is optional.
            Only currencies return in the system defined.
        headers:
            address:
                description: |-
                    Taken address from create wallet api
                    required: true
                example: tfab1e7sdt95e5lp5jr88c6kuqfdq3rym86gstc2hwr
                type: string
            chainId:
                description: |-
                    sepolia, ethereum, cosmos-mainnet, tokenfab-mainnet
                    required: true
                example: tokenfab-testnet
                type: string
            currency:
                description: |-
                    Currency code is the token short name like GOLD, USD, USDT
                    It gives as a parameter of TokenName when deploying contract
                    required: true
                example: USD
                type: string
    getBalanceResponse:
        description: Balance of the account returned to the user
        headers:
            amount:
                description: |-
                    Amount of coin. It is integer and no decimal. It should be powered by precision. For cosmos generally 6. 1 ATOM=1000000
                    required: true
                example: 1000000
                format: int64
                type: integer
            currency:
                description: |-
                    The currency defined in the system.
                    required: true
                example: TFAB
                type: string
            precision:
                description: |-
                    Token precision
                    required: true
                example: 6
                format: int16
                type: integer
    userSignedIn:
        description: User is logged in and token is returned
        headers:
            email:
                type: string
            role:
                type: string
            token:
                type: string
schemes:
    - http
    - https
security:
    - api_key: []
securityDefinitions:
    api_key:
        in: header
        name: KEY
        type: apiKey
    oauth2:
        authorizationUrl: /oauth2/auth
        flow: accessCode
        in: header
        scopes:
            bar: foo
        tokenUrl: /oauth2/token
        type: oauth2
swagger: "2.0"
